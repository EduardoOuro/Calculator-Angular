{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CalculatorService {\n  /* Define as constantes utilizadas\n     para identificar as operações de cálculo */\n\n  constructor() {}\n  /**\n   * Método que calcula uma operação matemática dado\n   * dois números.\n   * Suporta as operações soma, subtração, divisão,\n   * e multiplicação.\n   *\n   * @param num1 number\n   * @param num2 number\n   * @param operacao string Operação a ser executada\n   * @return number Resultado da operação\n   */\n  calcular(num1, num2, operacao) {\n    let resultado; // armazena o resultado da operação\n    switch (operacao) {\n      case CalculatorService.SOMA:\n        resultado = num1 + num2;\n        break;\n      case CalculatorService.SUBTRACAO:\n        resultado = num1 - num2;\n        break;\n      case CalculatorService.DIVISAO:\n        resultado = num1 / num2;\n        break;\n      case CalculatorService.MULTIPLICACAO:\n        resultado = num1 * num2;\n        break;\n      default:\n        resultado = 0;\n    }\n    return resultado;\n  }\n}\nCalculatorService.SOMA = '+';\nCalculatorService.SUBTRACAO = '-';\nCalculatorService.DIVISAO = '/';\nCalculatorService.MULTIPLICACAO = '*';\nCalculatorService.ɵfac = function CalculatorService_Factory(t) {\n  return new (t || CalculatorService)();\n};\nCalculatorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CalculatorService,\n  factory: CalculatorService.ɵfac\n});","map":{"version":3,"mappings":";AAGA,OAAM,MAAOA,iBAAiB;EAE5B;;;EAOAC,eAAgB;EAEhB;;;;;;;;;;;EAWAC,QAAQ,CAACC,IAAY,EAAEC,IAAY,EAAEC,QAAgB;IACpD,IAAIC,SAAiB,CAAC,CAAC;IAEvB,QAAOD,QAAQ;MACb,KAAKL,iBAAiB,CAACO,IAAI;QACzBD,SAAS,GAAGH,IAAI,GAAGC,IAAI;QAC1B;MACC,KAAKJ,iBAAiB,CAACQ,SAAS;QAC9BF,SAAS,GAAGH,IAAI,GAAGC,IAAI;QAC1B;MACC,KAAKJ,iBAAiB,CAACS,OAAO;QAC5BH,SAAS,GAAGH,IAAI,GAAGC,IAAI;QAC1B;MACC,KAAKJ,iBAAiB,CAACU,aAAa;QAClCJ,SAAS,GAAGH,IAAI,GAAGC,IAAI;QAC1B;MACC;QACEE,SAAS,GAAG,CAAC;IAAC;IAGlB,OAAOA,SAAS;EACjB;;AA3CWN,iBAAiB,CAIZO,IAAI,GAAW,GAAG;AAJvBP,iBAAiB,CAKZQ,SAAS,GAAW,GAAG;AAL5BR,iBAAiB,CAMZS,OAAO,GAAW,GAAG;AAN1BT,iBAAiB,CAOZU,aAAa,GAAW,GAAG;AAPhCV,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAW,SAAjBX,iBAAiB;AAAA","names":["CalculatorService","constructor","calcular","num1","num2","operacao","resultado","SOMA","SUBTRACAO","DIVISAO","MULTIPLICACAO","factory"],"sourceRoot":"","sources":["/home/luis.conrado@VALEMOBI.CORP/Documentos/GitAngular/Calculator-Angular/src/app/calculator/services/calculator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CalculatorService {\n\n  /* Define as constantes utilizadas \n     para identificar as operações de cálculo */\n  static readonly SOMA: string = '+';\n  static readonly SUBTRACAO: string = '-';\n  static readonly DIVISAO: string = '/';\n  static readonly MULTIPLICACAO: string = '*';\n\n  constructor() { }\n\n  /**\n   * Método que calcula uma operação matemática dado \n   * dois números.\n   * Suporta as operações soma, subtração, divisão, \n   * e multiplicação.\n   *\n   * @param num1 number\n   * @param num2 number\n   * @param operacao string Operação a ser executada\n   * @return number Resultado da operação\n   */\n  calcular(num1: number, num2: number, operacao: string): number {\n  \tlet resultado: number; // armazena o resultado da operação\n\n  \tswitch(operacao) {\n  \t  case CalculatorService.SOMA:\n  \t    resultado = num1 + num2;\n  \t\tbreak;\n  \t  case CalculatorService.SUBTRACAO:\n  \t    resultado = num1 - num2;\n  \t\tbreak;\n  \t  case CalculatorService.DIVISAO:\n  \t    resultado = num1 / num2;\n  \t\tbreak;\n  \t  case CalculatorService.MULTIPLICACAO:\n  \t    resultado = num1 * num2;\n  \t\tbreak;\n  \t  default:\n  \t    resultado = 0;\n  \t}\n\n  \treturn resultado;\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}